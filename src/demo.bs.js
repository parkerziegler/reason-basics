// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var $$String   = require("bs-platform/lib/js/string.js");
var Caml_obj   = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");

console.log("Hello, BuckleScript and Reason! \xe2\x80\x93 Luv BuckleScript");

console.log("Hello, BuckleScript and Reason! \xe2\x80\x93 Luv Reason");

console.log(Pervasives.string_of_int(1));

console.log(Pervasives.string_of_bool(/* true */1));

function isXY($$char) {
  if ($$char === 121 || $$char === 120) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

var stringFromChar = $$String.make(1, /* "x" */120) + $$String.make(1, /* "y" */121);

console.log(stringFromChar);

var greeting = "hello";

var space = " ";

var name = "P-Doo";

console.log("hello P-Doo");

var oneSlash = "\\";

console.log(oneSlash);

var multiLineString = "Hello\nParkie\nDoo";

console.log(multiLineString);

var unicodeString = "••∆∆••";

console.log(unicodeString);

var style = "background-color: papayawhip";

var cssStyle = "" + (String(style) + "");

console.log(cssStyle);

var length = greeting.length;

console.log(Pervasives.string_of_int(length));

var sub = $$String.sub(greeting, 1, 3);

console.log(sub);

console.log("Enjoying my ridiculous commentary yet?");

var content = "This tweet has good RT.";

console.log(content);

console.log("Parker");

var anonymousScope = (console.log("Seattle"), /* () */0);

function flowerLength(petal, sepal) {
  return petal + sepal | 0;
}

console.log(Pervasives.string_of_int(25));

var myTuple = /* tuple */[
  "Parkie",
  "is",
  1
];

function compareBool(tuple) {
  return +(tuple === myTuple);
}

console.log(Pervasives.string_of_bool(+(myTuple === myTuple)));

console.log(Pervasives.string_of_bool(Caml_obj.caml_equal(/* tuple */[
              /* "M" */77,
              23
            ], /* tuple */[
              /* "M" */77,
              23
            ])));

console.log(Pervasives.string_of_bool(+(/* tuple */[
            /* "M" */77,
            23
          ] === /* tuple */[
            /* "M" */77,
            23
          ])));

function sqaureInt(num) {
  return Caml_int32.imul(num, num);
}

console.log(Pervasives.string_of_int(400));

function circleArea(num) {
  return 3.1415926 * num * num;
}

console.log(Pervasives.string_of_float(3.1415926 * 314.2 * 314.2));

var first = "It";

var second = "Me";

console.log(first);

console.log(second);

console.log(Pervasives.string_of_int(44));

function rotate(x, y) {
  if (x !== 90) {
    if (x !== 180) {
      console.log("nothing");
      return /* () */0;
    } else if (y !== -180) {
      console.log("nothing");
      return /* () */0;
    } else {
      console.log("rotate " + (String(x) + (", " + (String(y) + ""))));
      return /* () */0;
    }
  } else if (y !== -90) {
    console.log("nothing");
    return /* () */0;
  } else {
    console.log("turn " + (String(x) + (", " + (String(y) + ""))));
    return /* () */0;
  }
}

rotate(180, -180);

rotate(90, -90);

var myVar = "myVar";

var x = /* "x" */120;

var y = /* "y" */121;

var displayGreeting = /* true */1;

var goodRT = /* true */1;

var petalLength = 5;

var sepalLength = 20;

var aGreatNumber = 20;

var aGreatFloat = 3.1415926;

var aDopeTuple = /* tuple */[
  /* "a" */97,
  "Dope",
  44,
  "tuple"
];

var twoTuple = /* tuple */[
  "It",
  "Me"
];

var thirdIdx = 44;

exports.myVar           = myVar;
exports.x               = x;
exports.y               = y;
exports.isXY            = isXY;
exports.stringFromChar  = stringFromChar;
exports.greeting        = greeting;
exports.space           = space;
exports.name            = name;
exports.oneSlash        = oneSlash;
exports.multiLineString = multiLineString;
exports.unicodeString   = unicodeString;
exports.style           = style;
exports.cssStyle        = cssStyle;
exports.length          = length;
exports.sub             = sub;
exports.displayGreeting = displayGreeting;
exports.goodRT          = goodRT;
exports.content         = content;
exports.anonymousScope  = anonymousScope;
exports.petalLength     = petalLength;
exports.sepalLength     = sepalLength;
exports.flowerLength    = flowerLength;
exports.myTuple         = myTuple;
exports.compareBool     = compareBool;
exports.aGreatNumber    = aGreatNumber;
exports.sqaureInt       = sqaureInt;
exports.aGreatFloat     = aGreatFloat;
exports.circleArea      = circleArea;
exports.aDopeTuple      = aDopeTuple;
exports.twoTuple        = twoTuple;
exports.first           = first;
exports.second          = second;
exports.thirdIdx        = thirdIdx;
exports.rotate          = rotate;
/*  Not a pure module */
