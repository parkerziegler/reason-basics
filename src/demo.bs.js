// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var Block                   = require("bs-platform/lib/js/block.js");
var $$String                = require("bs-platform/lib/js/string.js");
var Caml_obj                = require("bs-platform/lib/js/caml_obj.js");
var Caml_array              = require("bs-platform/lib/js/caml_array.js");
var Caml_int32              = require("bs-platform/lib/js/caml_int32.js");
var ListLabels              = require("bs-platform/lib/js/listLabels.js");
var Pervasives              = require("bs-platform/lib/js/pervasives.js");
var ArrayLabels             = require("bs-platform/lib/js/arrayLabels.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

console.log("Hello, BuckleScript and Reason! \xe2\x80\x93 Luv BuckleScript");

console.log("Hello, BuckleScript and Reason! \xe2\x80\x93 Luv Reason");

console.log(Pervasives.string_of_int(1));

console.log(Pervasives.string_of_bool(/* true */1));

function isXY($$char) {
  if ($$char === 121 || $$char === 120) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

var stringFromChar = $$String.make(1, /* "x" */120) + $$String.make(1, /* "y" */121);

console.log(stringFromChar);

var greeting = "hello";

var space = " ";

var name = "P-Doo";

console.log("hello P-Doo");

var oneSlash = "\\";

console.log(oneSlash);

var multiLineString = "Hello\nParkie\nDoo";

console.log(multiLineString);

var unicodeString = "••∆∆••";

console.log(unicodeString);

var style = "background-color: papayawhip";

var cssStyle = "" + (String(style) + "");

console.log(cssStyle);

var length = greeting.length;

console.log(Pervasives.string_of_int(length));

var sub = $$String.sub(greeting, 1, 3);

console.log(sub);

console.log("Enjoying my ridiculous commentary yet?");

var content = "This tweet has good RT.";

console.log(content);

var greatRT = "Most certainly.";

console.log(greatRT);

console.log("Parker");

var anonymousScope = (console.log("Seattle"), /* () */0);

function flowerLength(petal, sepal) {
  return petal + sepal | 0;
}

console.log(Pervasives.string_of_int(25));

var myTuple = /* tuple */[
  "Parkie",
  "is",
  1
];

function compareBool(tuple) {
  return +(tuple === myTuple);
}

console.log(Pervasives.string_of_bool(+(myTuple === myTuple)));

console.log(Pervasives.string_of_bool(Caml_obj.caml_equal(/* tuple */[
              /* "M" */77,
              23
            ], /* tuple */[
              /* "M" */77,
              23
            ])));

console.log(Pervasives.string_of_bool(+(/* tuple */[
            /* "M" */77,
            23
          ] === /* tuple */[
            /* "M" */77,
            23
          ])));

function sqaureInt(num) {
  return Caml_int32.imul(num, num);
}

console.log(Pervasives.string_of_int(400));

function circleArea(num) {
  return 3.1415926 * num * num;
}

console.log(Pervasives.string_of_float(3.1415926 * 314.2 * 314.2));

var first = "It";

var second = "Me";

console.log(first);

console.log(second);

console.log(Pervasives.string_of_int(44));

function rotate(x, y) {
  if (x !== 90) {
    if (x !== 180) {
      console.log("nothing");
      return /* () */0;
    } else if (y !== -180) {
      console.log("nothing");
      return /* () */0;
    } else {
      console.log("rotate " + (String(x) + (", " + (String(y) + ""))));
      return /* () */0;
    }
  } else if (y !== -90) {
    console.log("nothing");
    return /* () */0;
  } else {
    console.log("turn " + (String(x) + (", " + (String(y) + ""))));
    return /* () */0;
  }
}

rotate(180, -180);

rotate(90, -90);

var redSox = /* record */[
  /* name */"Red Sox",
  /* rank */1,
  /* average */5.6
];

console.log(redSox[/* name */0]);

console.log(Pervasives.string_of_float(redSox[/* average */2]));

var redSoxUpdate_000 = /* name */redSox[/* name */0];

var redSoxUpdate_001 = /* rank */redSox[/* rank */1];

var redSoxUpdate = /* record */[
  redSoxUpdate_000,
  redSoxUpdate_001,
  /* average */6.8
];

console.log(Pervasives.string_of_float(6.8));

redSox[/* rank */1] = redSox[/* rank */1] + 1 | 0;

console.log(Pervasives.string_of_int(redSox[/* rank */1]));

var capital = "Olympia";

var washington = /* record */[
  /* capital */capital,
  /* population */6000000
];

var seattle = /* record */[
  /* state */washington,
  /* team */"Mariners"
];

function urStatus(status) {
  switch (status) {
    case 0 : 
        return "You are dope!";
    case 1 : 
        return "You are sweet!";
    case 2 : 
        return "You are not bad!";
    case 3 : 
        return "You are dope af!";
    
  }
}

console.log("You are dope af!");

var myVar = /* RedSox */Block.__(0, ["Mookie Betts"]);

function namePlayer(teamArg) {
  if (typeof teamArg === "number") {
    return "Zdeno Chara";
  } else if (teamArg.tag) {
    var match = +(teamArg[1] < 2008);
    if (match !== 0) {
      return teamArg[0];
    } else {
      return "Big 3";
    }
  } else {
    return "You chose " + (String(teamArg[0]) + "");
  }
}

console.log(namePlayer(myVar));

console.log(namePlayer(/* Celtics */Block.__(1, [
            "Larry Bird",
            2009
          ])));

console.log(namePlayer(/* Celtics */Block.__(1, [
            "Larry Bird",
            1984
          ])));

var fibNum = /* :: */[
  1,
  /* :: */[
    1,
    /* :: */[
      2,
      /* :: */[
        3,
        /* :: */[
          5,
          /* :: */[
            8,
            /* :: */[
              13,
              /* :: */[
                21,
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

var fibNumHeadZero = /* :: */[
  0,
  fibNum
];

var myNum = List.nth(fibNum, 4);

var length$1 = List.length(fibNum);

List.nth(fibNum, length$1 - 1 | 0);

var fibArray = /* array */[
  1,
  1,
  2,
  3,
  5,
  8,
  13,
  21
];

var length$2 = fibArray.length;

var lastItem = Caml_array.caml_array_get(fibArray, length$2 - 1 | 0);

Caml_array.caml_array_set(fibArray, 2, 500);

Caml_array.caml_array_set(fibArray, 2, 1000);

Caml_array.caml_array_get(fibArray, 2);

var fibList = ArrayLabels.to_list(fibArray);

var fibBackAsArray = ArrayLabels.of_list(fibList);

function noArg() {
  console.log("This is unit!");
  return /* () */0;
}

function add(x) {
  return x + x | 0;
}

function square(x) {
  return Caml_int32.imul(x, x);
}

function addAndSquare(x) {
  var x$1 = x + x | 0;
  return Caml_int32.imul(x$1, x$1);
}

console.log(Pervasives.string_of_int(64));

function stringIntConcat($$int, str) {
  return Pervasives.string_of_int($$int) + (" " + str);
}

var res = stringIntConcat(50, "is an int.");

console.log(res);

function calcTriangleArea(b, h) {
  return 0.5 * b * h;
}

console.log(Pervasives.string_of_float(0.5 * 2.0 * 7.0));

function multiplyByFive(param) {
  return Caml_int32.imul(5, param);
}

var res$1 = multiplyByFive(6);

console.log(Pervasives.string_of_int(res$1));

var multiply = Caml_int32.imul;

function sayHello(g, name, _) {
  var person = name ? name[0] : "";
  console.log(g + (" " + person));
  return /* () */0;
}

sayHello("Marhaba", /* None */0, /* () */0);

sayHello("Ahlan ya", /* Some */["Parker"], /* () */0);

var actualFunction = sayHello("Marhaba", /* None */0, /* () */0);

function curriedFunction(param, param$1) {
  return sayHello("Marhaba", param, param$1);
}

var possibleName = /* Some */["Formidable"];

sayHello("Hi ya", possibleName, /* () */0);

function sayHello$1($staropt$star, name, _) {
  var greeting = $staropt$star ? $staropt$star[0] : "Aloha";
  var person = name ? name[0] : "";
  console.log(greeting + (" " + person));
  return /* () */0;
}

sayHello$1(/* None */0, /* None */0, /* () */0);

function factorial(num) {
  if (num) {
    return Caml_int32.imul(num, factorial(num - 1 | 0));
  } else {
    return 1;
  }
}

console.log(Pervasives.string_of_int(factorial(5)));

function factorialEven(num) {
  if (num) {
    return Caml_int32.imul(num, factorialOdd(num - 1 | 0));
  } else {
    return 1;
  }
}

function factorialOdd(num) {
  return Caml_int32.imul(num, factorialEven(num - 1 | 0));
}

console.log(Pervasives.string_of_int(factorialEven(6)));

var ms = "Mariners";

console.log(ms);

var al = "Illinois";

console.log(al);

function destructured(wowZA) {
  console.log(wowZA[/* exclamation */0]);
  console.log(wowZA[/* exclamation */0]);
  return /* () */0;
}

destructured(/* record */[/* exclamation */"Breathtaking, this Reason!"]);

var myVictory = /* OT */Block.__(2, [
    "8:03",
    1
  ]);

var myOTVictory;

switch (myVictory.tag | 0) {
  case 0 : 
      myOTVictory = "Yeesh, close game. Nice win by " + (Pervasives.string_of_int("8:03") + ".");
      break;
  case 1 : 
      myOTVictory = "Damn, what a blowout. " + (Pervasives.string_of_int("8:03") + " runs is impressive.");
      break;
  case 2 : 
      myOTVictory = "It took you 8:03 to win by " + (Pervasives.string_of_int(1) + ".");
      break;
  
}

console.log(myOTVictory);

var arr = /* int array */[
  500,
  600
];

function handleArray() {
  if (arr.length !== 2) {
    console.log("This is the default.");
    return /* () */0;
  } else {
    var match = arr[0];
    if (match !== 500) {
      console.log("You have two items in this array.");
      return /* () */0;
    } else {
      var match$1 = arr[1];
      if (match$1 !== 601) {
        console.log("You have two items in this array.");
        return /* () */0;
      } else {
        console.log("This is a very specific case.");
        return /* () */0;
      }
    }
  }
}

handleArray(arr);

function handleResult(res) {
  var exit = 0;
  if (res.tag) {
    var switcher = res[0] - 500 | 0;
    if (switcher > 2 || switcher < 0) {
      if (switcher !== -96) {
        exit = 1;
      } else {
        console.log("We couldn't find that, sorry :(.");
        return /* () */0;
      }
    } else if (switcher !== 1) {
      console.log("Things got messed up :(.");
      return /* () */0;
    } else {
      exit = 1;
    }
  } else if (res[0] !== 200) {
    exit = 1;
  } else {
    var f = function (acc, el) {
      return acc + (" " + el);
    };
    var resString = ListLabels.fold_left(f, "", res[1]);
    console.log("You've got data." + (resString + "."));
    return /* () */0;
  }
  if (exit === 1) {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "/Users/parkerziegler/Documents/repos/OSS/reason-basics/src/demo.re",
            535,
            48
          ]
        ];
  }
  
}

handleResult(/* Failure */Block.__(1, [500]));

handleResult(/* Success */Block.__(0, [
        200,
        /* :: */[
          "You",
          /* :: */[
            "Rock",
            /* [] */0
          ]
        ]
      ]));

function isServerError(err) {
  return +(err === 500);
}

function handleResult$1(res) {
  if (res.tag) {
    if (res[0] === 500) {
      console.log("Things got messed up on the server :(.");
      return /* () */0;
    } else {
      console.log("Bad gateway. Getaway? Who knows? :(.");
      return /* () */0;
    }
  } else if (res[0] !== 200) {
    throw [
          Caml_builtin_exceptions.match_failure,
          [
            "/Users/parkerziegler/Documents/repos/OSS/reason-basics/src/demo.re",
            554,
            48
          ]
        ];
  } else {
    var f = function (acc, el) {
      return acc + (" " + el);
    };
    var resString = ListLabels.fold_left(f, "", res[1]);
    console.log("You've got data." + (resString + "."));
    return /* () */0;
  }
}

handleResult$1(/* Failure */Block.__(1, [500]));

handleResult$1(/* Failure */Block.__(1, [502]));

function nested(composer) {
  switch (composer[/* name */0]) {
    case "Beethoven" : 
    case "Debussy" : 
    case "Mozart" : 
        return "Wowza!";
    default:
      if (composer[/* concertos */1] <= 7) {
        return "Boo!";
      } else {
        return "Just another composer";
      }
  }
}

console.log(nested(/* record */[
          /* name */"Debussy",
          /* concertos */57
        ]));

console.log(nested(/* record */[
          /* name */"Jerry",
          /* concertos */7
        ]));

var mutableVar = ["mutable"];

var newMutableVar = mutableVar[0];

mutableVar[0] = "NewMutableVar";

console.log(mutableVar[0]);

console.log("Shadow Me!");

var shadow = "But now I'm this!";

console.log(shadow);

for(var num = 1; num <= 100; ++num){
  if (num < 50) {
    console.log("You're not yet over the hill.");
  } else if (num >= 50) {
    console.log("Yep, you're there.");
  } else {
    console.log("Don't mind me");
  }
}

for(var num$1 = 100; num$1 >= 1; --num$1){
  if (num$1 < 50) {
    console.log("Full on Benjamin Buttoning now!");
  } else if (num$1 >= 50) {
    console.log("Starting to Benjamin Button.");
  } else {
    console.log("Don't mind me");
  }
}

var count = [1];

while(Caml_obj.caml_lessthan(count, [5])) {
  console.log("We are looping!");
  count[0] = count[0] + 1 | 0;
};

var x = /* "x" */120;

var y = /* "y" */121;

var displayGreeting = /* true */1;

var goodRT = /* true */1;

var petalLength = 5;

var sepalLength = 20;

var aGreatNumber = 20;

var aGreatFloat = 3.1415926;

var aDopeTuple = /* tuple */[
  /* "a" */97,
  "Dope",
  44,
  "tuple"
];

var twoTuple = /* tuple */[
  "It",
  "Me"
];

var thirdIdx = 44;

var team = /* Mariners */0;

var modalSize = /* tuple */[
  150,
  300
];

var dialogSize = /* tuple */[
  "500",
  "1000"
];

var result = /* Success */Block.__(0, [/* record */[
      /* data */"Woohoo",
      /* code */200
    ]]);

var errResult = /* Failure */Block.__(1, [404]);

var teams = /* tuple */[
  "Mariners",
  "Red Sox",
  "Astros",
  "Twins"
];

var bosox = "Red Sox";

var stros = "Astros";

var ts = "Twins";

var myRecord = /* record */[
  /* album */"Illinois",
  /* artist */"Sufjan Stevens"
];

var ar = "Sufjan Stevens";

var starter = 1;

var ender = 100;

exports.x                = x;
exports.y                = y;
exports.isXY             = isXY;
exports.stringFromChar   = stringFromChar;
exports.greeting         = greeting;
exports.space            = space;
exports.name             = name;
exports.oneSlash         = oneSlash;
exports.multiLineString  = multiLineString;
exports.unicodeString    = unicodeString;
exports.style            = style;
exports.cssStyle         = cssStyle;
exports.sub              = sub;
exports.displayGreeting  = displayGreeting;
exports.goodRT           = goodRT;
exports.content          = content;
exports.greatRT          = greatRT;
exports.anonymousScope   = anonymousScope;
exports.petalLength      = petalLength;
exports.sepalLength      = sepalLength;
exports.flowerLength     = flowerLength;
exports.myTuple          = myTuple;
exports.compareBool      = compareBool;
exports.aGreatNumber     = aGreatNumber;
exports.sqaureInt        = sqaureInt;
exports.aGreatFloat      = aGreatFloat;
exports.circleArea       = circleArea;
exports.aDopeTuple       = aDopeTuple;
exports.twoTuple         = twoTuple;
exports.first            = first;
exports.second           = second;
exports.thirdIdx         = thirdIdx;
exports.rotate           = rotate;
exports.redSox           = redSox;
exports.redSoxUpdate     = redSoxUpdate;
exports.capital          = capital;
exports.washington       = washington;
exports.seattle          = seattle;
exports.urStatus         = urStatus;
exports.team             = team;
exports.myVar            = myVar;
exports.namePlayer       = namePlayer;
exports.fibNum           = fibNum;
exports.fibNumHeadZero   = fibNumHeadZero;
exports.myNum            = myNum;
exports.fibArray         = fibArray;
exports.length           = length$2;
exports.lastItem         = lastItem;
exports.fibList          = fibList;
exports.fibBackAsArray   = fibBackAsArray;
exports.noArg            = noArg;
exports.add              = add;
exports.square           = square;
exports.addAndSquare     = addAndSquare;
exports.stringIntConcat  = stringIntConcat;
exports.calcTriangleArea = calcTriangleArea;
exports.multiplyByFive   = multiplyByFive;
exports.res              = res$1;
exports.multiply         = multiply;
exports.actualFunction   = actualFunction;
exports.curriedFunction  = curriedFunction;
exports.possibleName     = possibleName;
exports.sayHello         = sayHello$1;
exports.factorial        = factorial;
exports.factorialEven    = factorialEven;
exports.factorialOdd     = factorialOdd;
exports.modalSize        = modalSize;
exports.dialogSize       = dialogSize;
exports.result           = result;
exports.errResult        = errResult;
exports.teams            = teams;
exports.ms               = ms;
exports.bosox            = bosox;
exports.stros            = stros;
exports.ts               = ts;
exports.myRecord         = myRecord;
exports.al               = al;
exports.ar               = ar;
exports.destructured     = destructured;
exports.myVictory        = myVictory;
exports.myOTVictory      = myOTVictory;
exports.arr              = arr;
exports.handleArray      = handleArray;
exports.isServerError    = isServerError;
exports.handleResult     = handleResult$1;
exports.nested           = nested;
exports.mutableVar       = mutableVar;
exports.newMutableVar    = newMutableVar;
exports.shadow           = shadow;
exports.starter          = starter;
exports.ender            = ender;
exports.count            = count;
/*  Not a pure module */
