// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var $$String = require("bs-platform/lib/js/string.js");
var FindS = require("./findS");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var ListLabels = require("bs-platform/lib/js/listLabels.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ArrayLabels = require("bs-platform/lib/js/arrayLabels.js");
var Caml_oo_curry = require("bs-platform/lib/js/caml_oo_curry.js");
var CamlinternalOO = require("bs-platform/lib/js/camlinternalOO.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Team$ReasonBasics = require("./Team.bs.js");

var shared = ["city"];

console.log("Hello, BuckleScript and Reason! Luv BuckleScript");

console.log("Hello, BuckleScript and Reason! Luv Reason");

console.log(String(1));

console.log(Pervasives.string_of_bool(/* true */1));

Pervasives.print_int(1);

Pervasives.print_newline(/* () */0);

Pervasives.print_float(1.0);

Pervasives.print_newline(/* () */0);

function isXY($$char) {
  if ($$char === 121 || $$char === 120) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

var stringFromChar = $$String.make(1, /* "x" */120) + $$String.make(1, /* "y" */121);

console.log(stringFromChar);

var greeting = "Hello";

var space = " ";

var exclamation = "!";

console.log("Hello P-Doo!");

var whitespaceString = "   __trim me__   ";

var trimmedString = $$String.trim(whitespaceString);

console.log(trimmedString);

var atString = $$String.map((function (c) {
        if (c !== 32) {
          return c;
        } else {
          return /* "@" */64;
        }
      }), whitespaceString);

console.log(atString);

var slash = "\\";

console.log(slash);

var multilineString = "Hello\nReasonable\nFolks!";

console.log(multilineString);

var singlelineString = $$String.map((function (c) {
        if (c !== 10) {
          return c;
        } else {
          return /* " " */32;
        }
      }), multilineString);

console.log(singlelineString);

var style = "background-color: papayawhip";

var cssStyle = "" + (String(style) + "");

console.log(cssStyle);

var unicodeString = "••∆∆••";

console.log(unicodeString);

var background = "background-color: aquamarine";

var strLength = background.length;

console.log(String(strLength));

var subStr = $$String.sub(background, 0, $$String.index(background, /* "-" */45));

console.log(subStr);

console.log("Enjoying my ridiculous commentary yet?");

var content = "This tweet is good.";

console.log(content);

var retweet = "Most certainly.";

console.log(retweet);

console.log("" + (String("Parker") + (" works at " + (String("Formidable") + (" in " + (String("Seattle") + "."))))));

function flowerLength(petal, sepal) {
  return petal + sepal | 0;
}

console.log(String(25));

var myTuple = /* tuple */[
  "Parkie",
  "is",
  1
];

function compareBool(tuple) {
  return +(tuple === myTuple);
}

console.log(Pervasives.string_of_bool(compareBool(myTuple)));

console.log(Pervasives.string_of_bool(Caml_obj.caml_equal(/* tuple */[
              /* "M" */77,
              23
            ], /* tuple */[
              /* "M" */77,
              23
            ])));

console.log(Pervasives.string_of_bool(+(/* tuple */[
            /* "M" */77,
            23
          ] === /* tuple */[
            /* "M" */77,
            23
          ])));

function squareInt(num) {
  return Caml_int32.imul(num, num);
}

console.log(String(81));

console.log(String(0));

function circleArea(radius) {
  return 3.1415926 * radius * radius;
}

console.log(Pervasives.string_of_float(3.1415926 * 20.0 * 20.0));

var radius = Math.sqrt(3.1415926 * 20.0 * 20.0) / 3.1415926;

console.log(Pervasives.string_of_float(radius));

var first = "It";

var second = "Me";

console.log(first);

console.log(second);

console.log(String(100));

function rotate(x, y) {
  if (x !== 90) {
    if (x !== 180 || y !== -180) {
      console.log("Hold steady!");
      return /* () */0;
    } else {
      console.log("Rotate " + (String(x) + (", " + (String(y) + ""))));
      return /* () */0;
    }
  } else if (y !== -90) {
    console.log("Hold steady!");
    return /* () */0;
  } else {
    console.log("Turn " + (String(x) + (", " + (String(y) + ""))));
    return /* () */0;
  }
}

rotate(180, -180);

rotate(90, -90);

rotate(50, 70);

var redSox = /* record */[
  /* name */"Red Sox",
  /* rank */1,
  /* average */0.326
];

console.log(redSox[/* name */0]);

console.log(Pervasives.string_of_float(redSox[/* average */2]));

var redSoxUpdate_000 = /* name */redSox[/* name */0];

var redSoxUpdate_001 = /* rank */redSox[/* rank */1];

var redSoxUpdate = /* record */[
  redSoxUpdate_000,
  redSoxUpdate_001,
  /* average */0.418
];

console.log(Pervasives.string_of_float(0.418));

redSox[/* rank */1] = redSox[/* rank */1] + 1 | 0;

console.log(String(redSox[/* rank */1]));

var capital = "Olympia";

var washington = /* record */[
  /* capital */capital,
  /* population */6000000
];

var seattle_001 = /* team : record */[
  /* name */"Mariners",
  /* rank */3,
  /* average */0.298
];

var seattle = /* record */[
  /* state */washington,
  seattle_001
];

var jsObject = {
  response: {
    data: {
      starCount: 9,
      watchers: 2
    },
    code: 200
  }
};

var starCount = jsObject.response.data.starCount;

console.log(String(starCount));

function tweetStatus(status) {
  switch (status) {
    case 0 : 
        return "That was a dope tweet!";
    case 1 : 
        return "Pretty sweet tweet!";
    case 2 : 
        return "Not great, but not bad!";
    case 3 : 
        return "Pretty af tweet my friend!";
    
  }
}

console.log("Pretty af tweet my friend!");

var player = /* RedSox */Block.__(0, ["Mookie Betts"]);

function namePlayer(arg) {
  if (typeof arg === "number") {
    if (arg === 0) {
      return "Malcolm Butler";
    } else {
      return "Zdeno Chara";
    }
  } else if (arg.tag) {
    var match = +(arg[1] < 2008);
    if (match !== 0) {
      return arg[0];
    } else {
      return "Big 3";
    }
  } else {
    return "You chose " + (String(arg[0]) + "");
  }
}

console.log(namePlayer(player));

console.log(namePlayer(/* Celtics */Block.__(1, [
            "Larry Bird",
            2009
          ])));

console.log(namePlayer(/* Celtics */Block.__(1, [
            "Larry Bird",
            1984
          ])));

var possiblyNullInt = /* None */0;

function checkNull(num) {
  if (num) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

console.log(Pervasives.string_of_bool(checkNull(possiblyNullInt)));

var fibList = /* :: */[
  1,
  /* :: */[
    1,
    /* :: */[
      2,
      /* :: */[
        3,
        /* :: */[
          5,
          /* :: */[
            8,
            /* :: */[
              13,
              /* :: */[
                21,
                /* [] */0
              ]
            ]
          ]
        ]
      ]
    ]
  ]
];

var fibListHeadZero = /* :: */[
  0,
  fibList
];

var five = List.nth(fibList, 4);

console.log(String(five));

var length = List.length(fibList);

List.nth(fibList, length - 1 | 0);

var reverse = List.rev(fibList);

var sum = List.fold_left((function (acc, el) {
        return acc + el | 0;
      }), 0, fibList);

console.log(String(sum));

var thirteen = List.find((function (item) {
        return +(item === 13);
      }), fibList);

console.log(String(thirteen));

var aboveTen = List.filter((function (item) {
          return +(item > 10);
        }))(fibList);

List.iter((function (item) {
        console.log(String(item));
        return /* () */0;
      }), aboveTen);

var fibArray = /* array */[
  1,
  1,
  2,
  3,
  5,
  8,
  13,
  21
];

var length$1 = fibArray.length;

var lastItem = Caml_array.caml_array_get(fibArray, length$1 - 1 | 0);

Caml_array.caml_array_set(fibArray, 2, 500);

Caml_array.caml_array_set(fibArray, 2, 1000);

Caml_array.caml_array_get(fibArray, 2);

var fibArrayAsList = ArrayLabels.to_list(fibArray);

var fibListAsArray = ArrayLabels.of_list(fibArrayAsList);

var multiDemArray = $$Array.make_matrix(2, 2, "Initial.");

console.log(multiDemArray);

function noArg() {
  console.log("This is unit!");
  return /* () */0;
}

function add(x) {
  return x + x | 0;
}

function square(x) {
  return Caml_int32.imul(x, x);
}

function addAndSquare(x) {
  var x$1 = x + x | 0;
  return Caml_int32.imul(x$1, x$1);
}

console.log(String(64));

function concatStringInt($$int, str) {
  return String($$int) + (" " + str);
}

console.log(concatStringInt(50, "is an int."));

function calcTriangleArea(b, h) {
  return 0.5 * b * h;
}

console.log(Pervasives.string_of_float(0.5 * 2.0 * 7.0));

function multiplyByFive(param) {
  return Caml_int32.imul(5, param);
}

var result = multiplyByFive(6);

console.log(String(result));

var multiply = Caml_int32.imul;

function sayHello(g, name, _) {
  var person = name ? name[0] : "";
  console.log(g + (" " + person));
  return /* () */0;
}

sayHello("Marhaba", /* None */0, /* () */0);

sayHello("Ahlan ya", /* Some */["Parker"], /* () */0);

var actualFunction = sayHello("Marhaba", /* None */0, /* () */0);

function curriedFunction(param, param$1) {
  return sayHello("Marhaba", param, param$1);
}

curriedFunction(/* Some */["Parker"], /* () */0);

var possibleName = /* Some */["Formidable"];

sayHello("Hi ya", possibleName, /* () */0);

function sayHello$1($staropt$star, name, _) {
  var greeting = $staropt$star ? $staropt$star[0] : "Aloha";
  var person = name ? name[0] : "";
  console.log(greeting + (" " + person));
  return /* () */0;
}

sayHello$1(/* None */0, /* None */0, /* () */0);

function factorial(num) {
  if (num === 0) {
    return 1;
  } else {
    return Caml_int32.imul(num, factorial(num - 1 | 0));
  }
}

console.log(String(factorial(5)));

var FactorialArgument = Caml_exceptions.create("Index-ReasonBasics.FactorialArgument");

function factorialEven(num) {
  if (num === 0) {
    return 1;
  } else {
    var match = num % 2;
    if (match !== 0) {
      if (match !== 1) {
        return 1;
      } else {
        throw [
              FactorialArgument,
              "factorialEven only accepts even-numbered arguments."
            ];
      }
    } else {
      return Caml_int32.imul(num, factorialOdd(num - 1 | 0));
    }
  }
}

function factorialOdd(num) {
  if (num === 0) {
    return 1;
  } else {
    var match = num % 2;
    if (match !== 0) {
      if (match !== 1) {
        return 1;
      } else {
        return Caml_int32.imul(num, factorialEven(num - 1 | 0));
      }
    } else {
      throw [
            FactorialArgument,
            "factorialOdd only accepts odd-numbered arguments."
          ];
    }
  }
}

console.log(String(factorialEven(6)));

console.log(String(factorialOdd(5)));

console.log(String(45000));

var h = "1000";

var w = "500";

var dialogDescription = "This dialog is " + (String(w) + (" by " + (String(h) + " px")));

console.log(dialogDescription);

var twins = "Twins";

var stros = "Astros";

var bosox = "Red Sox";

var ms = "Mariners";

console.log("" + (String(ms) + (", " + (String(bosox) + (", " + (String(stros) + (",  " + (String(twins) + " === Parkie-Doo\'s playoff picks."))))))));

var artist = "Sufjan Stevens";

var name = "Illinois";

console.log("" + (String(artist) + (" wrote " + (String(name) + (" in " + (String(2004) + "."))))));

var a = "Sufjan Stevens";

var n = "Illinois";

console.log("" + (String(a) + (" wrote " + (String(n) + (" in " + (String(2004) + "."))))));

function exclaim(exclamation) {
  console.log("And lo, Parkie-Doo shouted, " + (String(exclamation[/* phrase */0]) + (" at " + (String(exclamation) + ".volume DB."))));
  return /* () */0;
}

exclaim(/* record */[
      /* phrase */"Breathtaking, this Reason!",
      /* volume */120.7
    ]);

var myVictory = /* OT */Block.__(2, [
    "8:03",
    1
  ]);

var myOTVictory;

switch (myVictory.tag | 0) {
  case 0 : 
      myOTVictory = "Yeesh, close game. Nice win by " + (String("8:03") + ".");
      break;
  case 1 : 
      myOTVictory = "Damn, what a blowout. " + (String("8:03") + " runs is impressive");
      break;
  case 2 : 
      myOTVictory = "It took " + (String("8:03") + (" to win by " + (String(1) + ". But a win\'s a win.")));
      break;
  
}

console.log(myOTVictory);

var arr = /* int array */[
  500,
  600
];

function handleArray(array) {
  if (array.length !== 2) {
    console.log("This is the default.");
    return /* () */0;
  } else {
    var match = array[0];
    if (match !== 500) {
      console.log("You have two items in this array.");
      return /* () */0;
    } else {
      var match$1 = array[1];
      if (match$1 !== 601) {
        console.log("You have two items in this array, and the first is 500.");
        return /* () */0;
      } else {
        console.log("This is a very specific case.");
        return /* () */0;
      }
    }
  }
}

handleArray(arr);

handleArray(/* int array */[
      500,
      601
    ]);

handleArray(/* int array */[
      101,
      102
    ]);

handleArray(/* int array */[1]);

function handleResult(res) {
  if (res.tag) {
    var switcher = res[0] - 500 | 0;
    if (switcher > 2 || switcher < 0) {
      if (switcher !== -96) {
        console.log("We don't know what happened, sorry!");
        return /* () */0;
      } else {
        console.log("Not found.");
        return /* () */0;
      }
    } else if (switcher !== 1) {
      console.log("Server error.");
      return /* () */0;
    } else {
      console.log("We don't know what happened, sorry!");
      return /* () */0;
    }
  } else if (res[0] !== 200) {
    console.log("We don't know what happened, sorry!");
    return /* () */0;
  } else {
    var f = function (acc, el) {
      return acc + (" " + el);
    };
    var resString = ListLabels.fold_left(f, "", res[1]);
    console.log("data: " + (String(resString) + ""));
    return /* () */0;
  }
}

handleResult(/* Failure */Block.__(1, [500]));

handleResult(/* Failure */Block.__(1, [502]));

handleResult(/* Success */Block.__(0, [
        200,
        /* :: */[
          "You",
          /* :: */[
            "Rock",
            /* [] */0
          ]
        ]
      ]));

handleResult(/* Success */Block.__(0, [
        201,
        /* :: */[
          "You",
          /* :: */[
            "Are",
            /* :: */[
              "Still",
              /* :: */[
                "Great",
                /* [] */0
              ]
            ]
          ]
        ]
      ]));

function isServerError(err) {
  return +(err === 500);
}

function isBadGateway(err) {
  return +(err === 502);
}

function handleResult$1(res) {
  if (res.tag) {
    var errCode = res[0];
    if (errCode === 500) {
      console.log("Server error.");
      return /* () */0;
    } else if (errCode === 502) {
      console.log("Bad gateway. Getaway? Who knows?");
      return /* () */0;
    } else if (errCode !== 404) {
      console.log("We don't know what happened, sorry!");
      return /* () */0;
    } else {
      console.log("Not found.");
      return /* () */0;
    }
  } else if (res[0] !== 200) {
    console.log("We don't know what happened, sorry!");
    return /* () */0;
  } else {
    var f = function (acc, el) {
      return acc + (" " + el);
    };
    var resString = ListLabels.fold_left(f, "", res[1]);
    console.log("data: " + (String(resString) + ""));
    return /* () */0;
  }
}

handleResult$1(/* Failure */Block.__(1, [500]));

handleResult$1(/* Failure */Block.__(1, [502]));

function evaluateComposer(composer) {
  switch (composer[/* name */0]) {
    case "Beethoven" : 
    case "Debussy" : 
    case "Mozart" : 
        return "What high class. How fancy!";
    default:
      if (composer[/* concertos */1] <= 7) {
        return "Not too bad, but nothing special.";
      } else {
        return "Just another composer";
      }
  }
}

console.log(evaluateComposer(/* record */[
          /* name */"Debussy",
          /* concertos */57
        ]));

console.log(evaluateComposer(/* record */[
          /* name */"Jerry",
          /* concertos */7
        ]));

var mutableVar = ["mutable"];

var mutableReference = mutableVar[0];

mutableVar[0] = "mutated";

console.log(mutableVar[0]);

console.log("First I am this!");

var shadow = "But now I've been shadowed!";

console.log(shadow);

function repeatCapitalize(times, str) {
  var result = "";
  for(var time = 1; time <= times; ++time){
    var match = time % 2;
    result = match !== 0 ? (
        match !== 1 ? result + str : result + str
      ) : result + $$String.capitalize(str);
  }
  return result;
}

console.log(repeatCapitalize(5, "reason"));

function factorialSum(num) {
  var result = 0;
  for(var n = num; n >= 0; --n){
    result = result + n | 0;
  }
  return result;
}

console.log(String(factorialSum(5)));

var count = [1];

while(Caml_obj.caml_lessthan(count, [5])) {
  console.log("We are while looping!");
  count[0] = count[0] + 1 | 0;
};

var twoS = FindS.findS("strings");

console.log(String(twoS));

function getRandomInt(m) {
  return Math.floor(Math.random() * Math.floor(m));
}

console.log(String(getRandomInt(100.0)));

var $$class = CamlinternalOO.create_table(shared);

var ids = CamlinternalOO.new_methods_variables($$class, shared, ["state"]);

var city = ids[0];

var state = ids[1];

CamlinternalOO.set_method($$class, city, (function () {
        return "Burlington";
      }));

function obj_init() {
  var self = CamlinternalOO.create_object_opt(0, $$class);
  self[state] = "Vermont";
  return self;
}

CamlinternalOO.init_class($$class);

var anUntypedReasonObject = obj_init(0);

console.log(Caml_oo_curry.js1(-1044368981, 1, anUntypedReasonObject));

var $$class$1 = CamlinternalOO.create_table([
      "city",
      "population",
      "state"
    ]);

var ids$1 = CamlinternalOO.get_method_labels($$class$1, [
      "state",
      "population",
      "city"
    ]);

var state$1 = ids$1[0];

var population = ids$1[1];

var city$1 = ids$1[2];

CamlinternalOO.set_methods($$class$1, /* array */[
      city$1,
      (function () {
          return "Burlington";
        }),
      state$1,
      (function () {
          return "Vermont";
        }),
      population,
      (function () {
          return 56000;
        })
    ]);

CamlinternalOO.init_class($$class$1);

var burlington = CamlinternalOO.create_object_opt(0, $$class$1);

console.log(String(Caml_oo_curry.js1(-200788083, 2, burlington)));

var $$class$2 = CamlinternalOO.create_table(["getPlace"]);

var ids$2 = CamlinternalOO.new_methods_variables($$class$2, [
      "getPlace",
      "addOn"
    ], [
      "address",
      "city",
      "zipCode"
    ]);

var getPlace = ids$2[0];

var addOn = ids$2[1];

var address = ids$2[2];

var city$2 = ids$2[3];

var zipCode = ids$2[4];

CamlinternalOO.set_methods($$class$2, /* array */[
      getPlace,
      (function (self$3, _) {
          return self$3[address] + (", " + (self$3[city$2] + (" " + (self$3[zipCode] + (". " + Curry._2(self$3[0][addOn], self$3, /* () */0))))));
        }),
      addOn,
      (function (_, _$1) {
          return "Didn't ya know?";
        })
    ]);

function obj_init$1() {
  var self = CamlinternalOO.create_object_opt(0, $$class$2);
  self[address] = "100 Church St";
  self[city$2] = "Burlington";
  self[zipCode] = "05712";
  return self;
}

CamlinternalOO.init_class($$class$2);

var vt = obj_init$1(0);

console.log(Caml_oo_curry.js2(610600017, 3, vt, /* () */0));

var reason = {
  color: "orange",
  language: "reason",
  users: 5000
};

console.log(reason.language);

console.log(FindS.myJSObject.language);

FindS.myJSObject.color = "orange";

console.log(FindS.myJSObject.color);

var continents = /* array */[
  "Africa",
  "Antarctica",
  "Asia",
  "Australia",
  "Europe",
  "North America",
  "South America"
];

function pickContinent(idx) {
  return Caml_array.caml_array_get(continents, idx);
}

var Earth = /* module */[
  /* continents */continents,
  /* pickContinent */pickContinent
];

var aussie = Caml_array.caml_array_get(continents, 3);

console.log(aussie);

console.log(Team$ReasonBasics.Boston[/* team */0]);

var match = Team$ReasonBasics.Boston[/* team */0];

var fact = match === "Red Sox" ? "The Red Sox are DOPE." : "Eh, don't really care.";

console.log(fact);

var team = Team$ReasonBasics.Boston[0];

var basketball = "Celtics";

var ExtendedBoston = /* module */[
  /* team */team,
  /* basketball */basketball
];

console.log(team);

console.log(basketball);

var promise = new Promise((function (resolve, _) {
        return resolve(100);
      }));

var Failure = Caml_exceptions.create("Index-ReasonBasics.Failure");

var failedPromise = new Promise((function (_, reject) {
        return reject([
                    Failure,
                    "Rejected!"
                  ]);
      }));

promise.then((function (res) {
            console.log(res);
            return Promise.resolve(res);
          })).then((function (res) {
          console.log("That's all folks!");
          return Promise.resolve(res - 100 | 0);
        })).catch((function (err) {
        console.log("Failure!!", err);
        return Promise.resolve(-1);
      }));

failedPromise.then((function (res) {
            console.log(res);
            return Promise.resolve(res);
          })).then((function (res) {
          return Promise.resolve(res - 100 | 0);
        })).catch((function (err) {
        console.log("Failure!!", err);
        return Promise.resolve(-1);
      }));

var myVar = "myVar";

var myInt = 1;

var x = /* "x" */120;

var displayGreeting = /* true */1;

var good = /* true */1;

var anonymousScope = /* () */0;

var petalLength = 5;

var sepalLength = 20;

var githubStars = 9;

var start = 1;

var remainder = 0;

var pi = 3.1415926;

var myTuple$1 = /* tuple */[
  /* "A" */65,
  "wonderful",
  100,
  "tuple"
];

var twoTuple = /* tuple */[
  "It",
  "Me"
];

var third = 100;

var population$1 = 6000000;

var team$1 = /* Mariners */0;

var isNull = /* true */1;

var modalSize = /* tuple */[
  150,
  300
];

var modalArea = 45000;

var dialogSize = /* tuple */[
  "500",
  "1000"
];

var result$1 = /* Success */Block.__(0, [/* record */[
      /* data */"Woohoo",
      /* code */200
    ]]);

var errResult = /* Failure */Block.__(1, [404]);

var teams = /* tuple */[
  "Mariners",
  "Red Sox",
  "Astros",
  "Twins"
];

var myFavoriteAlbum = /* record */[
  /* name */"Illinois",
  /* artist */"Sufjan Stevens",
  /* year */2004
];

var year = 2004;

var y = 2004;

exports.myVar = myVar;
exports.myInt = myInt;
exports.x = x;
exports.isXY = isXY;
exports.stringFromChar = stringFromChar;
exports.greeting = greeting;
exports.space = space;
exports.exclamation = exclamation;
exports.whitespaceString = whitespaceString;
exports.trimmedString = trimmedString;
exports.atString = atString;
exports.slash = slash;
exports.multilineString = multilineString;
exports.singlelineString = singlelineString;
exports.style = style;
exports.cssStyle = cssStyle;
exports.unicodeString = unicodeString;
exports.background = background;
exports.strLength = strLength;
exports.subStr = subStr;
exports.displayGreeting = displayGreeting;
exports.good = good;
exports.content = content;
exports.retweet = retweet;
exports.anonymousScope = anonymousScope;
exports.petalLength = petalLength;
exports.sepalLength = sepalLength;
exports.flowerLength = flowerLength;
exports.compareBool = compareBool;
exports.githubStars = githubStars;
exports.squareInt = squareInt;
exports.start = start;
exports.remainder = remainder;
exports.pi = pi;
exports.circleArea = circleArea;
exports.radius = radius;
exports.myTuple = myTuple$1;
exports.twoTuple = twoTuple;
exports.first = first;
exports.second = second;
exports.third = third;
exports.rotate = rotate;
exports.redSox = redSox;
exports.redSoxUpdate = redSoxUpdate;
exports.capital = capital;
exports.population = population$1;
exports.washington = washington;
exports.seattle = seattle;
exports.jsObject = jsObject;
exports.starCount = starCount;
exports.tweetStatus = tweetStatus;
exports.team = team$1;
exports.player = player;
exports.namePlayer = namePlayer;
exports.isNull = isNull;
exports.possiblyNullInt = possiblyNullInt;
exports.checkNull = checkNull;
exports.fibList = fibList;
exports.fibListHeadZero = fibListHeadZero;
exports.five = five;
exports.reverse = reverse;
exports.sum = sum;
exports.thirteen = thirteen;
exports.aboveTen = aboveTen;
exports.fibArray = fibArray;
exports.length = length$1;
exports.lastItem = lastItem;
exports.fibArrayAsList = fibArrayAsList;
exports.fibListAsArray = fibListAsArray;
exports.multiDemArray = multiDemArray;
exports.noArg = noArg;
exports.add = add;
exports.square = square;
exports.addAndSquare = addAndSquare;
exports.concatStringInt = concatStringInt;
exports.calcTriangleArea = calcTriangleArea;
exports.multiplyByFive = multiplyByFive;
exports.multiply = multiply;
exports.actualFunction = actualFunction;
exports.curriedFunction = curriedFunction;
exports.possibleName = possibleName;
exports.sayHello = sayHello$1;
exports.factorial = factorial;
exports.FactorialArgument = FactorialArgument;
exports.factorialEven = factorialEven;
exports.factorialOdd = factorialOdd;
exports.modalSize = modalSize;
exports.modalArea = modalArea;
exports.dialogSize = dialogSize;
exports.w = w;
exports.h = h;
exports.dialogDescription = dialogDescription;
exports.result = result$1;
exports.errResult = errResult;
exports.teams = teams;
exports.ms = ms;
exports.bosox = bosox;
exports.stros = stros;
exports.twins = twins;
exports.myFavoriteAlbum = myFavoriteAlbum;
exports.name = name;
exports.artist = artist;
exports.year = year;
exports.n = n;
exports.a = a;
exports.y = y;
exports.exclaim = exclaim;
exports.myVictory = myVictory;
exports.myOTVictory = myOTVictory;
exports.arr = arr;
exports.handleArray = handleArray;
exports.isServerError = isServerError;
exports.isBadGateway = isBadGateway;
exports.handleResult = handleResult$1;
exports.evaluateComposer = evaluateComposer;
exports.mutableVar = mutableVar;
exports.mutableReference = mutableReference;
exports.shadow = shadow;
exports.repeatCapitalize = repeatCapitalize;
exports.factorialSum = factorialSum;
exports.count = count;
exports.twoS = twoS;
exports.getRandomInt = getRandomInt;
exports.anUntypedReasonObject = anUntypedReasonObject;
exports.burlington = burlington;
exports.vt = vt;
exports.reason = reason;
exports.Earth = Earth;
exports.aussie = aussie;
exports.fact = fact;
exports.ExtendedBoston = ExtendedBoston;
exports.promise = promise;
exports.Failure = Failure;
exports.failedPromise = failedPromise;
/*  Not a pure module */
